{"version":3,"sources":["api/contact/contact.controller.js"],"names":["syncContact","index","show","create","update","destroy","handleError","res","argStatusCode","err","error","statusCode","status","send","updateContacts","contacts","userId","groupId","contact","shift","name","number","email","birthday","where","Contact","find","then","item","resolve","x","contactId","id","created","GroupContact","catch","req","body","json","message","Group","findOrCreate","user","group","end","console","log","next","query","limit","offset","fl","options","attributes","split","Number","reduce","nxt","key","value","params","all","findAll","count","routes","numFound","items","meta","findById","route","createdBy","updatedBy","active","destory"],"mappings":"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","file":"contact.controller.js","sourcesContent":["import logger from '../../components/logger';\nimport db from '../../conn/sqldb';\n\nfunction handleError(res, argStatusCode, err) {\n  logger.error('user.controller', err);\n  const statusCode = argStatusCode || 500;\n  res.status(statusCode).send(err);\n}\n\nfunction updateContacts({ contacts, userId, groupId }) {\n  const contact = contacts.shift();\n  if (contact) {\n    const { name, number, email, birthday } = contact;\n    const where = { userId };\n    if (number) where.number = number;\n    if (email) where.email = email;\n    return db.Contact.find({ where })\n      .then(item => (item\n        ? item.update({ name, email, birthday }).then(() => Promise.resolve([item, false]))\n        : db.Contact\n          .create({ name, number, userId, email, birthday })\n          .then(x => Promise.resolve([x, true]))))\n      .then(([{ id: contactId }, created]) => (created\n        ? db.GroupContact.create({ groupId, contactId })\n        : Promise.resolve()))\n      .then(() => updateContacts({ contacts, userId, groupId }))\n      .catch(() => updateContacts({ contacts, userId, groupId }));\n  }\n  return Promise.resolve();\n}\n\nexport function syncContact(req, res) {\n  const { name, contacts } = req.body;\n  if (!name || !contacts) return res.status(500).json({ message: 'Invalid Request' });\n  db.Group\n    .findOrCreate({ where: { name, userId: req.user.id } })\n    .then(([group]) => updateContacts({ contacts, userId: req.user.id, groupId: group.id }))\n    .then(() => res.end())\n    .catch(err => console.log(err));\n  return res.end();\n}\n\nexport function index(req, res, next) {\n  const { limit = 20, offset = 0, fl, where } = req.query;\n\n  const options = {\n    attributes: fl ? fl.split(',') : ['id', 'name'],\n    limit: Number(limit),\n    offset: Number(offset),\n  };\n\n  if (where) {\n    options.where = where.split(',').reduce((nxt, x) => {\n      const [key, value] = x.split(':');\n      return Object.assign(nxt, { [key]: value });\n    }, {});\n  }\n  if (req.params.groupId) options.where = { groupId: req.params.groupId };\n\n  return Promise\n    .all([\n      db.Contact\n        .findAll(options),\n      db.Contact\n        .count(),\n    ])\n    .then(([routes, numFound]) => res.json({ items: routes, meta: { numFound } }))\n    .catch(next);\n}\n\nexport function show(req, res, next) {\n  return db.Contact\n    .findById(req.params.id)\n    .then(route => res.json(route))\n    .catch(next);\n}\n\nexport function create(req, res, next) {\n  return db.Contact\n    .create(Object.assign({}, req.body, {\n      createdBy: req.user.id,\n      updatedBy: req.user.id,\n    }))\n    .then(({ id }) => res.status(201).json({ id }))\n    .catch(next);\n}\n\nexport function update(req, res, next) {\n  return db.Contact\n    .update(\n      Object.assign({}, req.body, {\n        active: false,\n        updatedBy: req.user.id,\n      }),\n      { where: { id: req.params.id } })\n    .then(() => res.status(201).end())\n    .catch(next);\n}\n\nexport function destroy(req, res, next) {\n  return db.Contact\n    .destory({ where: { id: req.params.id } })\n    .then(() => res.status(201).end())\n    .catch(next);\n}\n"]}