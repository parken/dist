{"version":3,"sources":["api/group/group.controller.js"],"names":["index","create","addEmailToGroup","handleError","res","argStatusCode","err","error","statusCode","status","send","req","Group","findAll","attributes","where","userId","user","id","then","GroupContact","sequelize","fn","groupId","groups","map","x","group","json","toJSON","contact","groupsContactCount","filter","y","count","catch","next","name","body","message","data","find","params","GroupEmail","findOrCreate","email","end","console","log"],"mappings":"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","file":"group.controller.js","sourcesContent":["import logger from '../../components/logger';\nimport db from '../../conn/sqldb';\n\nfunction handleError(res, argStatusCode, err) {\n  logger.error('user.controller', err);\n  const statusCode = argStatusCode || 500;\n  res.status(statusCode).send(err);\n}\n\nexport function index(req, res) {\n  return db.Group\n    .findAll({\n      attributes: ['id', 'name'],\n      where: { userId: req.user.id },\n    })\n    .then(groups => db.GroupContact\n      .findAll({\n        attributes: ['groupId', [db.sequelize.fn('COUNT', 'contactId'), 'count']],\n        where: { groupId: groups.map(x => x.id) },\n        group: 'groupId',\n      }).then(groupsContactCount => res.json(groups.map((x) => {\n        const group = x.toJSON();\n        let contact = groupsContactCount.filter(y => (y.groupId === group.id))[0];\n        if (contact) contact = contact.toJSON();\n        else contact = { count: 0 };\n        group.count = contact.count;\n        return group;\n      }))))\n    .catch(err => handleError(res, 500, err));\n}\n\nexport function create(req, res, next) {\n  const { name } = req.body;\n  if (!name) return res.status(500).json({ message: 'Invalid request' });\n  return db.Group\n    .create({ name, userId: req.user.id })\n    .then(data => res.json(data))\n    .catch(next);\n}\n\nexport function addEmailToGroup(req, res, next) {\n  return db.Group.find({ where: { name: req.params.name } })\n    .then(group => {\n      if (!group) return res.status(500).json({ message: 'no group found.' });\n      return db.GroupEmail\n        .findOrCreate({ where: { groupId: group.id, email: req.params.email } })\n        .then(() => res.status(202).end());\n    }).catch(err => console.log(err));\n}\n"]}