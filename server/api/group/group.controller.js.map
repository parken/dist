{"version":3,"sources":["api/group/group.controller.js"],"names":["index","handleError","res","argStatusCode","err","console","log","error","statusCode","status","send","req","Group","findAll","attributes","where","userId","user","id","then","GroupContact","sequelize","fn","groupId","groups","map","x","group","groupsContactCount","json","toJSON","contact","filter","y","count","catch"],"mappings":";;;;;QAUgBA,K,GAAAA,K;;AAVhB;;;;AACA;;;;;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,aAA1B,EAAyCC,GAAzC,EAA8C;AAC5CC,UAAQC,GAAR,CAAYF,GAAZ;AACA,mBAAOG,KAAP,CAAa,iBAAb,EAAgCH,GAAhC;AACA,MAAMI,aAAaL,iBAAiB,GAApC;AACAD,MAAIO,MAAJ,CAAWD,UAAX,EAAuBE,IAAvB,CAA4BN,GAA5B;AACD;;AAEM,SAASJ,KAAT,CAAeW,GAAf,EAAoBT,GAApB,EAAyB;AAC9B,SAAO,gBAAGU,KAAH,CACJC,OADI,CACI;AACPC,gBAAY,CAAC,IAAD,EAAO,MAAP,CADL;AAEPC,WAAO,EAAEC,QAAQL,IAAIM,IAAJ,CAASC,EAAnB;AAFA,GADJ,EAKJC,IALI,CAKC;AAAA,WAAU,gBAAGC,YAAH,CACbP,OADa,CACL;AACPC,kBAAY,CAAC,SAAD,EAAY,CAAC,gBAAGO,SAAH,CAAaC,EAAb,CAAgB,OAAhB,EAAyB,WAAzB,CAAD,EAAwC,OAAxC,CAAZ,CADL;AAEPP,aAAO,EAAEQ,SAASC,OAAOC,GAAP,CAAW;AAAA,iBAAKC,EAAER,EAAP;AAAA,SAAX,CAAX,EAFA;AAGPS,aAAO;AAHA,KADK,EAKXR,IALW,CAKN,UAACS,kBAAD;AAAA,aAAwB1B,IAAI2B,IAAJ,CAASL,OAAOC,GAAP,CAAW,aAAK;AACvD,YAAME,QAAQD,EAAEI,MAAF,EAAd;AACA,YAAIC,UAAUH,mBAAmBI,MAAnB,CAA0B;AAAA,iBAAMC,EAAEV,OAAF,KAAcI,MAAMT,EAA1B;AAAA,SAA1B,EAAyD,CAAzD,CAAd;AACA,YAAIa,OAAJ,EAAaA,UAAUA,QAAQD,MAAR,EAAV,CAAb,KACKC,UAAU,EAAEG,OAAO,CAAT,EAAV;AACLP,cAAMO,KAAN,GAAcH,QAAQG,KAAtB;AACA,eAAOP,KAAP;AACD,OAPwC,CAAT,CAAxB;AAAA,KALM,CAAV;AAAA,GALD,EAkBJQ,KAlBI,CAkBE;AAAA,WAAOlC,YAAYC,GAAZ,EAAiB,GAAjB,EAAsBE,GAAtB,CAAP;AAAA,GAlBF,CAAP;AAmBD","file":"group.controller.js","sourcesContent":["import logger from '../../components/logger';\nimport db from '../../conn/sqldb';\n\nfunction handleError(res, argStatusCode, err) {\n  console.log(err)\n  logger.error('user.controller', err);\n  const statusCode = argStatusCode || 500;\n  res.status(statusCode).send(err);\n}\n\nexport function index(req, res) {\n  return db.Group\n    .findAll({\n      attributes: ['id', 'name'],\n      where: { userId: req.user.id },\n    })\n    .then(groups => db.GroupContact\n      .findAll({\n        attributes: ['groupId', [db.sequelize.fn('COUNT', 'contactId'), 'count']],\n        where: { groupId: groups.map(x => x.id) },\n        group: 'groupId',\n      }).then((groupsContactCount) => res.json(groups.map(x => {\n        const group = x.toJSON();\n        let contact = groupsContactCount.filter(y => (y.groupId === group.id))[0];\n        if (contact) contact = contact.toJSON();\n        else contact = { count: 0 };\n        group.count = contact.count;\n        return group;\n      }))))\n    .catch(err => handleError(res, 500, err));\n}\n"]}