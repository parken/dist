{"version":3,"sources":["api/upstream/upstream.controller.js"],"names":["index","show","create","activate","update","destroy","createPlan","req","res","next","query","limit","offset","fl","where","options","attributes","split","Number","reduce","nxt","x","key","value","all","Upstream","findAll","count","then","upstreams","numFound","json","items","meta","catch","findById","params","id","upstream","body","createdBy","user","updatedBy","status","routeId","deactivateOtherRoutes","active","end","destory","roleId","message","UpstreamPlan","upstreamId","handleError","err"],"mappings":";;;;;;;;;;;;;;;;;;;;;;QAGgBA,K,GAAAA,K;QA2BAC,I,GAAAA,I;QAOAC,M,GAAAA,M;QAUAC,Q,GAAAA,Q;QAYAC,M,GAAAA,M;QAYAC,O,GAAAA,O;QAOAC,U,GAAAA,U;;AA9EhB;;;;AACA;;;;;;AAEO,SAASN,KAAT,CAAeO,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAAA,mBACUF,IAAIG,KADd;AAAA,oCAC5BC,KAD4B;AAAA,MAC5BA,KAD4B,oCACpB,EADoB;AAAA,qCAChBC,MADgB;AAAA,MAChBA,MADgB,qCACP,CADO;AAAA,MACJC,EADI,cACJA,EADI;AAAA,MACAC,KADA,cACAA,KADA;;;AAGpC,MAAMC,UAAU;AACdC,gBAAYH,KAAKA,GAAGI,KAAH,CAAS,GAAT,CAAL,GAAqB,CAAC,IAAD,EAAO,MAAP,CADnB;AAEdN,WAAOO,OAAOP,KAAP,CAFO;AAGdC,YAAQM,OAAON,MAAP;AAHM,GAAhB;;AAMA,MAAIE,KAAJ,EAAW;AACTC,YAAQD,KAAR,GAAgBA,MAAMG,KAAN,CAAY,GAAZ,EAAiBE,MAAjB,CAAwB,UAACC,GAAD,EAAMC,CAAN,EAAY;AAAA,qBAC7BA,EAAEJ,KAAF,CAAQ,GAAR,CAD6B;AAAA;AAAA,UAC3CK,GAD2C;AAAA,UACtCC,KADsC;;AAElD,aAAO,sBAAcH,GAAd,oCAAsBE,GAAtB,EAA4BC,KAA5B,EAAP;AACD,KAHe,EAGb,EAHa,CAAhB;AAID;;AAED,SAAO,kBACJC,GADI,CACA,CACH,gBAAGC,QAAH,CACGC,OADH,CACWX,OADX,CADG,EAGH,gBAAGU,QAAH,CACGE,KADH,EAHG,CADA,EAOJC,IAPI,CAOC;AAAA;AAAA,QAAEC,SAAF;AAAA,QAAaC,QAAb;;AAAA,WAA2BtB,IAAIuB,IAAJ,CAAS,EAAEC,OAAOH,SAAT,EAAoBI,MAAM,EAAEH,kBAAF,EAA1B,EAAT,CAA3B;AAAA,GAPD,EAQJI,KARI,CAQEzB,IARF,CAAP;AASD;;AAEM,SAASR,IAAT,CAAcM,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AACnC,SAAO,gBAAGgB,QAAH,CACJU,QADI,CACK5B,IAAI6B,MAAJ,CAAWC,EADhB,EAEJT,IAFI,CAEC;AAAA,WAAYpB,IAAIuB,IAAJ,CAASO,QAAT,CAAZ;AAAA,GAFD,EAGJJ,KAHI,CAGEzB,IAHF,CAAP;AAID;;AAEM,SAASP,MAAT,CAAgBK,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACrC,SAAO,gBAAGgB,QAAH,CACJvB,MADI,CACG,sBAAc,EAAd,EAAkBK,IAAIgC,IAAtB,EAA4B;AAClCC,eAAWjC,IAAIkC,IAAJ,CAASJ,EADc;AAElCK,eAAWnC,IAAIkC,IAAJ,CAASJ;AAFc,GAA5B,CADH,EAKJT,IALI,CAKC;AAAA,QAAGS,EAAH,SAAGA,EAAH;AAAA,WAAY7B,IAAImC,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB,EAAEM,MAAF,EAArB,CAAZ;AAAA,GALD,EAMJH,KANI,CAMEzB,IANF,CAAP;AAOD;;AAEM,SAASN,QAAT,CAAkBI,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAAA,MAC/B4B,EAD+B,GACxB9B,IAAI6B,MADoB,CAC/BC,EAD+B;;AAEvC,kBAAGZ,QAAH,CACGU,QADH,CACYE,EADZ,EAEGT,IAFH,CAEQ;AAAA,QAAGgB,OAAH,SAAGA,OAAH;AAAA,WAAiB,gBAAGnB,QAAH,CACpBoB,qBADoB,kBACM,EAAED,gBAAF,EADN,CAAjB;AAAA,GAFR,EAIGhB,IAJH,CAIQ;AAAA,WAAM,gBAAGH,QAAH,CACTrB,MADS,CACF,EAAE0C,QAAQ,IAAV,EADE,EACgB,EAAEhC,OAAO,EAAEuB,MAAF,EAAT,EADhB,CAAN;AAAA,GAJR,EAMGT,IANH,CAMQ;AAAA,WAAMpB,IAAImC,MAAJ,CAAW,GAAX,EAAgBI,GAAhB,EAAN;AAAA,GANR,EAOGb,KAPH,CAOSzB,IAPT;AAQD;;AAEM,SAASL,MAAT,CAAgBG,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACrC,SAAO,gBAAGgB,QAAH,CACJrB,MADI,CAEH,sBAAc,EAAd,EAAkBG,IAAIgC,IAAtB,EAA4B;AAC1BO,YAAQ,KADkB;AAE1BJ,eAAWnC,IAAIkC,IAAJ,CAASJ;AAFM,GAA5B,CAFG,EAMH,EAAEvB,OAAO,EAAEuB,IAAI9B,IAAI6B,MAAJ,CAAWC,EAAjB,EAAT,EANG,EAOJT,IAPI,CAOC;AAAA,WAAMpB,IAAImC,MAAJ,CAAW,GAAX,EAAgBI,GAAhB,EAAN;AAAA,GAPD,EAQJb,KARI,CAQEzB,IARF,CAAP;AASD;;AAEM,SAASJ,OAAT,CAAiBE,GAAjB,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AACtC,SAAO,gBAAGgB,QAAH,CACJuB,OADI,CACI,EAAElC,OAAO,EAAEuB,IAAI9B,IAAI6B,MAAJ,CAAWC,EAAjB,EAAT,EADJ,EAEJT,IAFI,CAEC;AAAA,WAAMpB,IAAImC,MAAJ,CAAW,GAAX,EAAgBI,GAAhB,EAAN;AAAA,GAFD,EAGJb,KAHI,CAGEzB,IAHF,CAAP;AAID;;AAEM,SAASH,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAAA,MAC3BmB,KAD2B,GACjBpB,IAAIgC,IADa,CAC3BZ,KAD2B;;AAEnC,MAAI,CAACA,KAAD,IAAUpB,IAAIkC,IAAJ,CAASQ,MAAT,KAAoB,CAAlC,EAAqC,OAAOzC,IAAImC,MAAJ,CAAW,GAAX,EAAgBZ,IAAhB,CAAqB,EAAEmB,SAAS,iBAAX,EAArB,CAAP;AACrC,SAAO,gBAAGC,YAAH,CACJjD,MADI,CACG;AACNkD,gBAAY7C,IAAI6B,MAAJ,CAAWC,EADjB;AAENG,eAAWjC,IAAIkC,IAAJ,CAASJ,EAFd;AAGNK,eAAWnC,IAAIkC,IAAJ,CAASJ,EAHd;AAINV;AAJM,GADH,EAOJC,IAPI,CAOC;AAAA,WAAMpB,IAAImC,MAAJ,CAAW,GAAX,EAAgBI,GAAhB,EAAN;AAAA,GAPD,EAQJb,KARI,CAQE;AAAA,WAAOmB,YAAY7C,GAAZ,EAAiB,GAAjB,EAAsB8C,GAAtB,CAAP;AAAA,GARF,CAAP;AASD","file":"upstream.controller.js","sourcesContent":["import logger from '../../components/logger/index';\nimport db from '../../conn/sqldb/index';\n\nexport function index(req, res, next) {\n  const { limit = 20, offset = 0, fl, where } = req.query;\n\n  const options = {\n    attributes: fl ? fl.split(',') : ['id', 'name'],\n    limit: Number(limit),\n    offset: Number(offset),\n  };\n\n  if (where) {\n    options.where = where.split(',').reduce((nxt, x) => {\n      const [key, value] = x.split(':');\n      return Object.assign(nxt, { [key]: value });\n    }, {});\n  }\n\n  return Promise\n    .all([\n      db.Upstream\n        .findAll(options),\n      db.Upstream\n        .count(),\n    ])\n    .then(([upstreams, numFound]) => res.json({ items: upstreams, meta: { numFound } }))\n    .catch(next);\n}\n\nexport function show(req, res, next) {\n  return db.Upstream\n    .findById(req.params.id)\n    .then(upstream => res.json(upstream))\n    .catch(next);\n}\n\nexport function create(req, res, next) {\n  return db.Upstream\n    .create(Object.assign({}, req.body, {\n      createdBy: req.user.id,\n      updatedBy: req.user.id,\n    }))\n    .then(({ id }) => res.status(201).json({ id }))\n    .catch(next);\n}\n\nexport function activate(req, res, next) {\n  const { id } = req.params;\n  db.Upstream\n    .findById(id)\n    .then(({ routeId }) => db.Upstream\n      .deactivateOtherRoutes(db, { routeId }))\n    .then(() => db.Upstream\n      .update({ active: true }, { where: { id } }))\n    .then(() => res.status(201).end())\n    .catch(next);\n}\n\nexport function update(req, res, next) {\n  return db.Upstream\n    .update(\n      Object.assign({}, req.body, {\n        active: false,\n        updatedBy: req.user.id,\n      }),\n      { where: { id: req.params.id } })\n    .then(() => res.status(201).end())\n    .catch(next);\n}\n\nexport function destroy(req, res, next) {\n  return db.Upstream\n    .destory({ where: { id: req.params.id } })\n    .then(() => res.status(201).end())\n    .catch(next);\n}\n\nexport function createPlan(req, res) {\n  const { count } = req.body;\n  if (!count || req.user.roleId !== 1) return res.status(404).json({ message: 'Invalid Request' });\n  return db.UpstreamPlan\n    .create({\n      upstreamId: req.params.id,\n      createdBy: req.user.id,\n      updatedBy: req.user.id,\n      count,\n    })\n    .then(() => res.status(202).end())\n    .catch(err => handleError(res, 500, err));\n}\n"]}