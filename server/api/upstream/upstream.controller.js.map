{"version":3,"sources":["api/upstream/upstream.controller.js"],"names":["index","show","create","update","destroy","createPlan","handleError","res","argStatusCode","err","error","statusCode","status","send","req","next","query","limit","offset","fl","Upstream","findAll","then","json","upstreams","catch","findById","params","id","upstream","body","createdBy","user","updatedBy","where","end","destory","count","roleId","message","UpstreamPlan","upstreamId"],"mappings":"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","file":"upstream.controller.js","sourcesContent":["import logger from '../../components/logger/index';\nimport db from '../../conn/sqldb/index';\n\nfunction handleError(res, argStatusCode, err) {\n  logger.error('user.controller', err);\n  const statusCode = argStatusCode || 500;\n  res.status(statusCode).send(err);\n}\n\n\nexport function index(req, res, next) {\n  const { limit = 20, offset = 0, fl } = req.query;\n  return db.Upstream\n    .findAll({\n      limit,\n      offset,\n    })\n    .then(upstreams => res.json(upstreams))\n    .catch(next);\n}\n\nexport function show(req, res, next) {\n  return db.Upstream\n    .findById(req.params.id)\n    .then(upstream => res.json(upstream))\n    .catch(next);\n}\n\nexport function create(req, res, next) {\n  return db.Upstream\n    .create(Object.assign({}, req.body, {\n      createdBy: req.user.id,\n      updatedBy: req.user.id,\n    }))\n    .then(({ id }) => res.status(201).json({ id }))\n    .catch(next);\n}\n\nexport function update(req, res, next) {\n  return db.Upstream\n    .update(Object\n      .assign({}, req.body, { updatedBy: req.user.id }), { where: { id: req.params.id } })\n    .then(() => res.status(201).end())\n    .catch(next);\n}\n\nexport function destroy(req, res, next) {\n  return db.Upstream\n    .destory({ where: { id: req.params.id } })\n    .then(() => res.status(201).end())\n    .catch(next);\n}\n\nexport function createPlan(req, res) {\n  const {count} = req.body;\n  if (!count || req.user.roleId !== 1) return res.status(404).json({message: 'Invalid Request'});\n  return db.UpstreamPlan\n    .create({\n      upstreamId: req.params.id,\n      createdBy: req.user.id,\n      updatedBy: req.user.id,\n      count,\n    })\n    .then(() => res.status(202).end())\n    .catch(err => handleError(res, 500, err));\n}\n"]}