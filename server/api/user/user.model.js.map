{"version":3,"sources":["api/user/user.model.js"],"names":["sequelize","DataTypes","User","define","id","type","INTEGER","allowNull","primaryKey","autoIncrement","name","STRING","mobile","email","otp","otpStatus","password","active","BOOLEAN","admin","companyName","companyLogo","supportName","supportMobile","supportEmail","loginUrl","slackUrl","slackActive","smsActive","transactionalStartFrom","transactionalPercent","promotionalStartFrom","promotionalPercent","otpStartFrom","otpPercent","senderIdStartFrom","senderIdPercent","expiresAt","DATE","sellingBalanceTransactional","sendingBalanceTransactional","sellingBalancePromotional","sendingBalancePromotional","sellingBalanceSenderId","sendingBalanceSenderId","sellingBalanceOTP","sendingBalanceOTP","tableName","timestamps","paranoid","instanceMethods","verifyPasswordAsync","hashedPass","createHash","update","salt","digest","resolve","pick","toJSON","reject","code","message","verifyPassword","cb","hashPassword","revokeTokens","db","expires","Date","all","AccessToken","where","userId","RefreshToken","classMethods","associate","belongsTo","Group","foreignKey","as","checkEmailExists","count","then","rows","checkMobileExists","checkExists","e","m","hooks","beforeCreate","instance","changed","set","beforeUpdate"],"mappings":"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","file":"user.model.js","sourcesContent":["\nimport _ from 'lodash';\nimport crypto from 'crypto';\n\nconst salt = 'DYhG93b0fIxfs2guVoUubasdfajfkljasdjfaklsdjflakrfWwvniR2G0FgaC9mi';\n\nexport default function (sequelize, DataTypes) {\n  const User = sequelize.define('User', {\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    name: DataTypes.STRING,\n    mobile: DataTypes.STRING,\n    email: DataTypes.STRING,\n    otp: DataTypes.STRING,\n    otpStatus: DataTypes.INTEGER,\n    password: DataTypes.STRING,\n    active: DataTypes.BOOLEAN,\n    admin: DataTypes.INTEGER,\n    companyName: DataTypes.STRING,\n    companyLogo: DataTypes.STRING,\n    supportName: DataTypes.STRING,\n    supportMobile: DataTypes.STRING,\n    supportEmail: DataTypes.STRING,\n    loginUrl: DataTypes.STRING,\n    slackUrl: DataTypes.STRING,\n    slackActive: DataTypes.BOOLEAN,\n    smsActive: DataTypes.BOOLEAN,\n    transactionalStartFrom: DataTypes.INTEGER,\n    transactionalPercent: DataTypes.INTEGER,\n    promotionalStartFrom: DataTypes.INTEGER,\n    promotionalPercent: DataTypes.INTEGER,\n    otpStartFrom: DataTypes.INTEGER,\n    otpPercent: DataTypes.INTEGER,\n    senderIdStartFrom: DataTypes.INTEGER,\n    senderIdPercent: DataTypes.INTEGER,\n    expiresAt: DataTypes.DATE,\n    sellingBalanceTransactional: DataTypes.INTEGER,\n    sendingBalanceTransactional: DataTypes.INTEGER,\n    sellingBalancePromotional: DataTypes.INTEGER,\n    sendingBalancePromotional: DataTypes.INTEGER,\n    sellingBalanceSenderId: DataTypes.INTEGER,\n    sendingBalanceSenderId: DataTypes.INTEGER,\n    sellingBalanceOTP: DataTypes.INTEGER,\n    sendingBalanceOTP: DataTypes.INTEGER,\n  }, {\n    tableName: 'users',\n    timestamps: true,\n    paranoid: true,\n    instanceMethods: {\n      verifyPasswordAsync(password) {\n        const hashedPass = crypto\n          .createHash('md5')\n          .update(salt + password)\n          .digest('hex');\n        return (hashedPass === this.password) ? Promise.resolve(_.pick(this.toJSON(), ['id']))\n          : Promise.reject({ code: 400, message: 'Check password!' });\n      },\n      verifyPassword(password, cb) {\n        return (this.hashPassword(password) === this.password) ?\n          cb(null, this.toJSON()) : cb(null, false);\n      },\n\n      revokeTokens(db) {\n        const expires = new Date();\n        return Promise.all([\n          db.AccessToken.update(\n            { expires },\n            { where: { userId: this.id } }),\n          db.RefreshToken.update(\n            { expires },\n            { where: { userId: this.id } }),\n        ]);\n      },\n\n      hashPassword(password) {\n        return crypto\n          .createHash('md5')\n          .update(salt + password)\n          .digest('hex');\n      },\n    },\n\n    classMethods: {\n      associate(db) {\n        User.belongsTo(db.Group, {\n          foreignKey: 'roleId',\n        });\n        User.belongsTo(User, {\n          foreignKey: 'createdBy',\n          allowNull: true,\n          as: 'CreatedBy',\n        });\n        User.belongsTo(User, {\n          foreignKey: 'resellerId',\n          allowNull: true,\n          as: 'ResellerId',\n        });\n      },\n      checkEmailExists(db, email) {\n        return db.User.count({ where: { email } }).then((rows) => {\n          if (rows > 0) return Promise.resolve(true);\n          return Promise.resolve(false);\n        });\n      },\n      checkMobileExists(db, mobile) {\n        return db.User.count({ where: { mobile } }).then((rows) => {\n          if (rows > 0) return Promise.resolve(true);\n          return Promise.resolve(false);\n        });\n      },\n      checkExists(db, email, mobile) {\n        return Promise.all([\n          email ? db.User.checkEmailExists(db, email) : Promise.resolve(false),\n          mobile ? db.User.checkMobileExists(db, mobile) : Promise.resolve(false),\n        ])\n          .then(([e, m]) => ({ email: e, mobile: m }));\n      },\n    },\n    hooks: {\n      beforeCreate(instance) {\n        if (instance.changed('password')) {\n          instance\n            .set('password', instance.hashPassword(instance.password));\n        }\n      },\n\n      beforeUpdate(instance) {\n        if (instance.changed('password')) {\n          instance\n            .set('password', instance.hashPassword(instance.password));\n        }\n      },\n    },\n  });\n\n  return User;\n}\n"]}