{"version":3,"sources":["api/user/user.model.js"],"names":["sequelize","DataTypes","User","define","id","type","INTEGER","allowNull","primaryKey","autoIncrement","name","STRING","mobile","email","otp","otpStatus","password","active","BOOLEAN","tableName","timestamps","paranoid","instanceMethods","hashPassword","createHash","update","salt","digest","verifyPasswordAsync","hashedPass","resolve","pick","toJSON","reject","code","message","verifyPassword","cb","revokeTokens","db","expires","Date","all","AccessToken","where","userId","RefreshToken","classMethods","associate","belongsTo","Role","foreignKey","App","as","checkEmailExists","count","then","rows","checkMobileExists","checkExists","e","m","hooks","beforeCreate","instance","changed","set","beforeUpdate"],"mappings":"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","file":"user.model.js","sourcesContent":["\nimport _ from 'lodash';\nimport crypto from 'crypto';\n\nconst salt = 'DYhG93b0fIxfs2guVoUubasdfajfkljasdjfaklsdjflakrfWwvniR2G0FgaC9mi';\n\nexport default function (sequelize, DataTypes) {\n  const User = sequelize.define('User', {\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    name: DataTypes.STRING,\n    mobile: DataTypes.INTEGER,\n    email: DataTypes.STRING,\n    otp: DataTypes.STRING,\n    otpStatus: DataTypes.INTEGER,\n    password: DataTypes.STRING,\n    active: DataTypes.BOOLEAN,\n  }, {\n    tableName: 'users',\n    timestamps: true,\n    paranoid: true,\n    instanceMethods: {\n      hashPassword(password) {\n        return crypto\n          .createHash('md5')\n          .update(salt + password)\n          .digest('hex');\n      },\n      verifyPasswordAsync(password) {\n        const hashedPass = crypto\n          .createHash('md5')\n          .update(salt + password)\n          .digest('hex');\n        return (hashedPass === this.password) ? Promise.resolve(_.pick(this.toJSON(), ['id']))\n          : Promise.reject({ code: 400, message: 'Check password!' });\n      },\n      verifyPassword(password, cb) {\n        return (User.hashPassword(password) === this.password) ?\n          cb(null, this.toJSON()) : cb(null, false);\n      },\n\n      revokeTokens(db) {\n        const expires = new Date();\n        return Promise.all([\n          db.AccessToken.update(\n            { expires },\n            { where: { userId: this.id } }),\n          db.RefreshToken.update(\n            { expires },\n            { where: { userId: this.id } }),\n        ]);\n      },\n    },\n\n    classMethods: {\n      associate(db) {\n        this.db = db;\n        User.belongsTo(db.Role, {\n          foreignKey: 'roleId',\n        });\n        User.belongsTo(db.App, {\n          foreignKey: 'appId',\n        });\n        User.belongsTo(User, {\n          foreignKey: 'createdBy',\n          allowNull: true,\n          as: 'CreatedBy',\n        });\n      },\n      checkEmailExists(db, email) {\n        return db.User.count({ where: { email } }).then((rows) => {\n          if (rows > 0) return Promise.resolve(true);\n          return Promise.resolve(false);\n        });\n      },\n      checkMobileExists(db, mobile) {\n        return db.User.count({ where: { mobile } }).then((rows) => {\n          if (rows > 0) return Promise.resolve(true);\n          return Promise.resolve(false);\n        });\n      },\n      checkExists(db, email, mobile) {\n        return Promise.all([\n          email ? db.User.checkEmailExists(db, email) : Promise.resolve(false),\n          mobile ? db.User.checkMobileExists(db, mobile) : Promise.resolve(false),\n        ])\n          .then(([e, m]) => ({ email: e, mobile: m }));\n      },\n      hashPassword(password) {\n        return crypto\n          .createHash('md5')\n          .update(salt + password)\n          .digest('hex');\n      },\n    },\n    hooks: {\n      beforeCreate(instance) {\n        if (instance.changed('password')) {\n          instance\n            .set('password', this.db.User.hashPassword(instance.password));\n        }\n      },\n\n      beforeUpdate(instance) {\n        if (instance.changed('password')) {\n          instance\n            .set('password', instance.hashPassword(instance.password));\n        }\n      },\n    },\n  });\n\n  return User;\n}\n"]}