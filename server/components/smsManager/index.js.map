{"version":3,"sources":["components/smsManager/index.js"],"names":["log","SmsManager","messageFly","queue","processing","processItem","list","reject","message","shift","number","unicode","flash","route","routeId","text","MessageFly","sender","SenderId","name","method","uri","qs","token","type","sms","json","then","update","messageStatusId","comment","body","operatorOn","catch","resolve","processOperatorSelection","length","messageFlyId","Upstream","findAll","where","balance","$gt","upstreams","upstreamMessageMap","i","upstream","id","splice","sequelize","transaction","promises","Message","map","x","messageIdAllocated","push","upstreamId","build","all","Transaction","create","count","transactionStatusId","decrement","data","commit","include","messages","transactions","err","rollback","processUserMessages","split","userId","startQueue","addToSmsQueue","forEach","includes","addPendingMessagesToQueue","attributes","send","createdAt","$lte","subtract","error","createBulkMessages","senderId","campaignId","scheduledOn","bulkCreate","addToScheduler","messageTextId","packageTypeId","messageTypeId","ScheduleMessage","canSendSms","resellerId","User","users","every","u","balanceField","roleId","code","sendSms","user","campaign","numbers","groupIds","GroupContact","groupId","Number","model","Contact","substring","Campaign","findOrCreate","getSenderId","senderIdObj","toJSON","senderIdStatusId","total"],"mappings":"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","file":"index.js","sourcesContent":["import debug from 'debug';\nimport moment from 'moment';\nimport rp from 'request-promise';\n\nimport db from '../../conn/sqldb';\nimport SenderId from '../../components/senderId';\nimport logger from '../../components/logger';\nimport { getRouteType } from '../../conn/sqldb/helper';\n\nconst log = debug('components/smsManager');\n\nconst SmsManager = {\n  messageFly: { queue: [], processing: false },\n  processItem({ list, reject = false }) {\n    const message = list.shift();\n    if (message) {\n      const {\n        number,\n        unicode,\n        flash,\n        routeId: route,\n        MessageFly: { text },\n        SenderId: { name: sender },\n      } = message;\n      log('unicode, flash', unicode, flash);\n      return rp({\n        method: 'POST',\n        uri: 'http://sms.parkentechnology.com/httpapi/httpapi',\n        qs: {\n          token: 'b9a7fc874a245e0f5e1cf46bb0455015',\n          sender,\n          number,\n          route,\n          type: 1,\n          sms: text,\n        },\n        json: true,\n      })\n        .then(body => message.update({ messageStatusId: 4, comment: body, operatorOn: moment() }))\n        .then(() => SmsManager.processItem({ list, reject }))\n        .catch(() => SmsManager.processItem({ list, reject: true }));\n    }\n    if (reject) return Promise.reject('Rejecting on request');\n    return Promise.resolve();\n  },\n  processOperatorSelection({ list }) {\n    if (!list.length) return Promise.resolve();\n    const { routeId, messageFlyId } = list[0];\n    return db.Upstream\n      .findAll({ where: { routeId, balance: { $gt: 0 } } })\n      .then((upstreams) => {\n        const upstreamMessageMap = {};\n        for (let i = 0; i < upstreams.length; i += 1) {\n          const upstream = upstreams[i];\n          if (upstream.balance >= list.length) {\n            upstreamMessageMap[upstream.id] = list.splice(0, list.length);\n            break;\n          }\n          upstreamMessageMap[upstream.id] = list.splice(0, upstream.balance);\n        }\n        upstreamMessageMap[0] = list;\n        return db.sequelize.transaction()\n          .then((transaction) => {\n            const promises = [\n              db.Message\n                .update(\n                  { messageStatusId: 3 },\n                  { where: { id: upstreamMessageMap[0].map(x => x.id) } },\n                  { transaction }),\n            ];\n            delete upstreamMessageMap[0];\n            const messageIdAllocated = [];\n            promises.push(...Object.keys(upstreamMessageMap).map((upstreamId) => {\n              const id = upstreamMessageMap[upstreamId].map(x => x.id);\n              messageIdAllocated.push(...id);\n              const upstream = db.Upstream.build({ id: upstreamId });\n              return Promise.all([\n                db.Message.update(\n                  { messageStatusId: 2, upstreamId },\n                  { where: { id } }, { transaction }),\n                db.Transaction.create(\n                  {\n                    upstreamId,\n                    messageFlyId,\n                    count: upstreamMessageMap[upstreamId].map(x => x.id).length,\n                    transactionStatusId: 1,\n                  }, { transaction }),\n                upstream.decrement({ balance: id.length }, { transaction }),\n              ]);\n            }));\n            return Promise\n              .all(promises)\n              .then((data) => {\n                transaction.commit();\n                return db.Message.findAll({\n                  where: { id: messageIdAllocated },\n                  include: [db.Upstream, db.MessageFly, db.SenderId],\n                }).then(messages => SmsManager.processItem({ list: messages }))\n                  .then(() => Promise.resolve(data.splice(1, data.length).map(x => x[1])));\n              })\n              .then(transactions => db.Transaction.update(\n                { transactionStatusId: 2 },\n                { where: { id: transactions.map(x => x.id) } }))\n              .catch((err) => {\n                transaction.rollback();\n                return Promise.reject(err);\n              });\n          });\n      });\n  },\n  processUserMessages() {\n    if (SmsManager.messageFly.processing) return Promise.resolve();\n    const [messageFlyId, userId, routeId] = (SmsManager.messageFly.queue.shift() || '').split(':');\n    if (messageFlyId) {\n      SmsManager.messageFly.processing = true;\n      return db.Message\n        .findAll({\n          where: { userId, routeId, messageFlyId },\n        })\n        .then(list => SmsManager.processOperatorSelection({ list }))\n        .then(() => {\n          SmsManager.messageFly.processing = false;\n          SmsManager.processUserMessages();\n        })\n        .catch(() => {\n          SmsManager.messageFly.processing = false;\n          return SmsManager.processUserMessages();\n        });\n    }\n    return Promise.resolve();\n  },\n  startQueue() {\n    if (!SmsManager.messageFly.processing) SmsManager.processUserMessages();\n    return Promise.resolve();\n  },\n  addToSmsQueue(messages) {\n    messages.forEach(x => (SmsManager.messageFly.queue\n      .includes(`${x.messageFlyId}:${x.userId}:${x.routeId}`)\n      ? ''\n      : SmsManager.messageFly.queue.push(`${x.messageFlyId}:${x.userId}:${x.routeId}`)));\n    return SmsManager.startQueue();\n  },\n  addPendingMessagesToQueue() {\n    return Promise.all([\n      db.Message.findAll({\n        attributes: ['messageFlyId', 'routeId', 'userId'],\n        where: {\n          messageStatusId: [1],\n          send: 1,\n          createdAt: { $lte: moment().subtract(10, 'minute') },\n        },\n      }).then(messages => SmsManager.addToSmsQueue(messages)),\n      db.Transaction.findAll({\n        where: { transactionStatusId: 1, createdAt: { $lte: moment().subtract(10, 'minute') } },\n      }).then((transactions) => {\n        if (!transactions.length) return Promise.resolve();\n        return db.Message.findAll({\n          where: {\n            messageStatusId: 2,\n            messageFlyId: transactions.map(x => x.messageFlyId),\n            send: 1,\n            createdAt: { $lte: moment().subtract(10, 'minute') },\n          },\n          include: [db.Upstream, db.MessageFly, db.SenderId],\n        }).then(messages => SmsManager.processItem({ list: messages }))\n          .then(() => db.Transaction.update(\n            { transactionStatusId: 2 },\n            { where: { id: transactions.map(x => x.id) } }));\n      }),\n    ]).catch(err => logger.error('addPendingMessagesToQueue', err));\n  },\n  createBulkMessages({ list, messageFlyId, userId, senderId, routeId, campaignId, unicode,\n    flash, scheduledOn, send }) {\n    return db.Message.bulkCreate(list.map(number => ({ number,\n      messageFlyId,\n      messageStatusId: 1,\n      userId,\n      senderId,\n      routeId,\n      campaignId,\n      flash,\n      scheduledOn,\n      send,\n      unicode,\n    }))).then(messages => (send ? SmsManager.addToSmsQueue(messages) : Promise.resolve()));\n  },\n  /**\n   * @param statusId : created(0)\n   * @returns {Promise.<Array.<Instance>>}\n   */\n  addToScheduler({ list, messageTextId, userId, senderId, packageTypeId, messageTypeId, scheduledOn,\n    campaignId }) {\n    return db.ScheduleMessage.bulkCreate(list.map(number => ({\n      userId,\n      number,\n      messageTextId,\n      packageTypeId,\n      senderId,\n      messageTypeId,\n      scheduledOn,\n      messageStatusId: 1,\n      campaignId,\n    })));\n  },\n  canSendSms({ userId, resellerId, routeId, count }) {\n    if (!userId || !routeId) {\n      return Promise.reject({ message: 'Check Failed canSendSms.' });\n    }\n    const id = [userId];\n    if (resellerId) id.push(resellerId);\n    return db.User\n      .findAll({\n        where: { id },\n        attributes: ['id', 'roleId', `sellingBalance${getRouteType(routeId)}`,\n          `sendingBalance${getRouteType(routeId)}`] })\n      .then((users) => {\n        if (users.every((u) => {\n          const balanceField = `${u.roleId === 4 ? 'selling' : 'sending'\n          }Balance${getRouteType(routeId)}`;\n          return u[balanceField] >= count;\n        })) {\n          return Promise.resolve();\n        }\n        return Promise.reject({ message: 'Limit Exceeded', code: 404 });\n      });\n  },\n  /**\n   * @param text\n   * @param user\n   * @param routeId\n   * @param campaign\n   * @param numbers\n   * @param groupIds\n   * @param unicode\n   * @param flash\n   * @param senderId\n   * @param scheduledOn\n   * @returns {*}\n   */\n  sendSms({ text, user, routeId, campaign, numbers, groupIds, unicode, flash, senderId,\n    scheduledOn }) {\n    if (!text || !user) return Promise.reject({ message: 'Invalid request.' });\n    const { id: userId, resellerId } = user;\n    return Promise.all([\n      (groupIds\n        ? db.GroupContact.findAll({\n          where: { groupId: Number(groupIds) ? Number(groupIds) : groupIds.split(',').map(Number) },\n          include: [{ attributes: ['number'], model: db.Contact }],\n        }).then(data => data.map(x => x.Contact.number.substring(x.Contact.number.length - 10)))\n        : Promise.resolve([])),\n      (campaign\n        ? db.Campaign.findOrCreate({ where: { name: campaign, userId: user.id } })\n          .then(([x]) => x.id)\n        : Promise.resolve()),\n      SenderId.getSenderId(senderId, user.id),\n    ])\n      .then(([list, campaignId, senderIdObj]) => {\n        const { id, senderIdStatusId } = senderIdObj.toJSON();\n        if (numbers) list.push(...numbers.split(','));\n        if (senderIdStatusId === 3) {\n          return Promise.reject({ message: 'SenderId is blocked', code: 404 });\n        }\n        const send = senderIdStatusId === 2;\n        return SmsManager.canSendSms({ userId, resellerId, routeId, count: list.length })\n          .then(() => db.MessageFly.create({ text,\n            numbers,\n            groupIds,\n            total: list.length,\n            unicode,\n            flash,\n            scheduledOn,\n            campaignId,\n            routeId,\n            senderId: id,\n            send }))\n          .then(messageFly => SmsManager\n            .createBulkMessages({ list,\n              messageFlyId: messageFly.id,\n              userId: user.id,\n              senderId: id,\n              routeId,\n              campaignId,\n              unicode,\n              flash,\n              scheduledOn,\n              send,\n            }));\n      });\n  },\n};\n\nexport default SmsManager;\n"]}