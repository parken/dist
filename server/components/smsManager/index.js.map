{"version":3,"sources":["components/smsManager/index.js"],"names":["SmsManager","messageFly","queue","processing","processItem","list","reject","message","shift","number","unicode","flash","route","routeId","text","MessageFly","sender","SenderId","name","method","uri","qs","token","type","sms","json","then","body","update","messageStatusId","comment","operatorOn","catch","resolve","processOperatorSelection","length","messageFlyId","Upstream","findAll","where","balance","$gt","upstreamMessageMap","i","upstreams","upstream","id","splice","sequelize","transaction","promises","Message","map","x","messageIdAllocated","push","upstreamId","build","all","Transaction","create","count","transactionStatusId","decrement","commit","include","messages","data","transactions","rollback","err","processUserMessages","split","userId","startQueue","addToSmsQueue","forEach","includes","addPendingMessagesToQueue","attributes","send","createdAt","$lte","subtract","console","log","createBulkMessages","senderId","campaignId","scheduledOn","bulkCreate","addToScheduler","messageTextId","packageTypeId","messageTypeId","ScheduleMessage","canSendSms","resellerId","User","users","every","balanceField","u","roleId","code","sendSms","user","campaign","numbers","groupIds","GroupContact","groupId","Number","model","Contact","substring","Campaign","findOrCreate","getSenderId","senderIdObj","toJSON","senderIdStatusId","total"],"mappings":"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","file":"index.js","sourcesContent":["import moment from 'moment';\nimport db from '../../conn/sqldb';\nimport SenderId from '../../components/senderId';\nimport rp from 'request-promise';\nimport { getRouteType } from '../../conn/sqldb/helper';\n\nconst SmsManager = {\n  messageFly: { queue: [], processing: false },\n  processItem({ list, reject = false }) {\n    const message = list.shift();\n    if (message) {\n      const {\n        number,\n        unicode,\n        flash,\n        routeId: route,\n        MessageFly: { text },\n        SenderId: { name: sender },\n      } = message;\n      return rp({\n        method: 'POST',\n        uri: 'http://sms.parkentechnology.com/httpapi/httpapi',\n        qs: {\n          token: 'b9a7fc874a245e0f5e1cf46bb0455015',\n          sender,\n          number,\n          route,\n          type: 1,\n          sms: text,\n        },\n        json: true,\n      })\n        .then((body) => message.update({ messageStatusId: 4, comment: body, operatorOn: moment() }))\n        .then(() => SmsManager.processItem({ list, reject }))\n        .catch(() => SmsManager.processItem({ list, reject: true }));\n    }\n    if (reject) return Promise.reject(\"Rejecting on request\");\n    return Promise.resolve();\n  },\n  processOperatorSelection({ list }) {\n    if (!list.length) return Promise.resolve();\n    const { routeId, messageFlyId } = list[0];\n    return db.Upstream\n      .findAll({ where: { routeId, balance: { $gt: 0 } } })\n      .then(upstreams => {\n        const upstreamMessageMap = {};\n        for (let i = 0; i < upstreams.length; i++) {\n          const upstream = upstreams[i];\n          if (upstream.balance >= list.length) {\n            upstreamMessageMap[upstream.id] = list.splice(0, list.length);\n            break;\n          }\n          upstreamMessageMap[upstream.id] = list.splice(0, upstream.balance);\n        }\n        upstreamMessageMap[0] = list;\n        return db.sequelize.transaction()\n          .then(transaction => {\n            const promises = [\n              db.Message\n                .update(\n                  { messageStatusId: 3 },\n                  { where: { id: upstreamMessageMap[0].map(x => x.id) } },\n                  { transaction }\n                ),\n            ];\n            delete upstreamMessageMap[0];\n            const messageIdAllocated = [];\n            promises.push(...Object.keys(upstreamMessageMap).map(upstreamId => {\n              const id = upstreamMessageMap[upstreamId].map(x => x.id);\n              messageIdAllocated.push(...id);\n              const upstream = db.Upstream.build({ id: upstreamId });\n              return Promise.all([\n                db.Message.update(\n                  { messageStatusId: 2, upstreamId },\n                  { where: { id } }, { transaction }),\n                db.Transaction.create(\n                  {\n                    upstreamId,\n                    messageFlyId, count: upstreamMessageMap[upstreamId].map(x => x.id).length,\n                    transactionStatusId: 1,\n                  }, { transaction }),\n                upstream.decrement({ balance: id.length }, { transaction }),\n              ]);\n            }));\n            return Promise\n              .all(promises)\n              .then(data => {\n                transaction.commit();\n                return db.Message.findAll({\n                  where: { id: messageIdAllocated },\n                  include: [db.Upstream, db.MessageFly, db.SenderId],\n                }).then(messages => SmsManager.processItem({ list: messages }))\n                  .then(() => Promise.resolve(data.splice(1, data.length).map(x => x[1])));\n              })\n              .then(transactions => db.Transaction.update(\n                { transactionStatusId: 2 },\n                { where: { id: transactions.map(x => x.id) } }))\n              .catch(err => {\n                transaction.rollback();\n                return Promise.reject(err);\n              });\n          });\n      });\n  },\n  processUserMessages() {\n    if (SmsManager.messageFly.processing) return Promise.resolve();\n    const [messageFlyId, userId, routeId] = (SmsManager.messageFly.queue.shift() || '').split(':');\n    if (messageFlyId) {\n      SmsManager.messageFly.processing = true;\n      return db.Message\n        .findAll({\n          where: { userId, routeId, messageFlyId },\n        })\n        .then(list => SmsManager.processOperatorSelection({ list }))\n        .then(() => {\n          SmsManager.messageFly.processing = false;\n          SmsManager.processUserMessages();\n        })\n        .catch(() => {\n          SmsManager.messageFly.processing = false;\n          return SmsManager.processUserMessages();\n        });\n    }\n    return Promise.resolve();\n  },\n  startQueue() {\n    if (!SmsManager.messageFly.processing) SmsManager.processUserMessages();\n    return Promise.resolve();\n  },\n  addToSmsQueue(messages) {\n    messages.forEach(x => (SmsManager.messageFly.queue\n      .includes(`${x.messageFlyId}:${x.userId}:${x.routeId}`)\n      ? ''\n      : SmsManager.messageFly.queue.push(`${x.messageFlyId}:${x.userId}:${x.routeId}`)));\n    return SmsManager.startQueue();\n  },\n  addPendingMessagesToQueue() {\n    return Promise.all([\n      db.Message.findAll({\n        attributes: ['messageFlyId', 'routeId', 'userId'],\n        where: {\n          messageStatusId: [1],\n          send: 1,\n          createdAt: { $lte: moment().subtract(10, 'minute') },\n        },\n      }).then(messages => SmsManager.addToSmsQueue(messages)),\n      db.Transaction.findAll({\n        where: { transactionStatusId: 1, createdAt: { $lte: moment().subtract(10, 'minute') } },\n      }).then(transactions => {\n        if (!transactions.length) return Promise.resolve();\n        return db.Message.findAll({\n          where: {\n            messageStatusId: 2,\n            messageFlyId: transactions.map(x => x.messageFlyId),\n            send: 1,\n            createdAt: { $lte: moment().subtract(10, 'minute') },\n          },\n          include: [db.Upstream, db.MessageFly, db.SenderId],\n        }).then(messages => SmsManager.processItem({ list: messages }))\n          .then(() => db.Transaction.update(\n            { transactionStatusId: 2 },\n            { where: { id: transactions.map(x => x.id) } }\n          ));\n      }),\n    ]).catch(err => console.log('>>>>>>>>>>>>>>>>>>>>>>>>>', err));\n  },\n  createBulkMessages({ list, messageFlyId, userId, senderId, routeId, campaignId, unicode,\n                       flash, scheduledOn, send }) {\n    return db.Message.bulkCreate(list.map(number => ({ number, messageFlyId, messageStatusId: 1,\n      userId, senderId, routeId, campaignId, flash, scheduledOn, send, unicode,\n    }))).then(messages => (send ? SmsManager.addToSmsQueue(messages) : Promise.resolve()));\n  },\n  /**\n   * @param statusId : created(0)\n   * @returns {Promise.<Array.<Instance>>}\n   */\n  addToScheduler({ list, messageTextId, userId, senderId, packageTypeId, messageTypeId, scheduledOn,\n                   campaignId }) {\n    return db.ScheduleMessage.bulkCreate(list.map(number => ({\n      userId,\n      number,\n      messageTextId,\n      packageTypeId,\n      senderId,\n      messageTypeId,\n      scheduledOn,\n      messageStatusId: 1,\n      campaignId,\n    })));\n  },\n  canSendSms({ userId, resellerId, routeId, count }) {\n    if (!userId || !routeId) {\n      return Promise.reject({ message: 'Check Failed canSendSms.' });\n    }\n    const id = [userId];\n    if (resellerId) id.push(resellerId);\n    return db.User\n      .findAll({\n        where: { id },\n        attributes: ['id', 'roleId', `sellingBalance${getRouteType(routeId)}`,\n          `sendingBalance${getRouteType(routeId)}`] })\n      .then(users => {\n        if (users.every(u => {\n          const balanceField = `${u.roleId === 4 ? 'selling' : 'sending'\n          }Balance${getRouteType(routeId)}`;\n          return u[balanceField] >= count;\n        })) {\n          return Promise.resolve();\n        }\n        return Promise.reject({ message: 'Limit Exceeded', code: 404 });\n      });\n  },\n  /**\n   * @param text\n   * @param user\n   * @param routeId\n   * @param campaign\n   * @param numbers\n   * @param groupIds\n   * @param unicode\n   * @param flash\n   * @param senderId\n   * @param scheduledOn\n   * @returns {*}\n   */\n  sendSms({ text, user, routeId, campaign, numbers, groupIds, unicode, flash, senderId,\n            scheduledOn }) {\n    if (!text || !user) return Promise.reject({ message: 'Invalid request.' });\n    const { id: userId, resellerId } = user;\n    return Promise.all([\n      (groupIds\n        ? db.GroupContact.findAll({\n          where: { groupId: Number(groupIds) ? Number(groupIds) : groupIds.split(',').map(Number) },\n          include: [{ attributes: ['number'], model: db.Contact }],\n        }).then(data => data.map(x => x.Contact.number.substring(x.Contact.number.length - 10)))\n        : Promise.resolve([])),\n      (campaign\n        ? db.Campaign.findOrCreate({ where: { name: campaign, userId: user.id } })\n          .then(([x]) => x.id)\n        : Promise.resolve()),\n      SenderId.getSenderId(senderId, user.id),\n    ])\n      .then(([list, campaignId, senderIdObj]) => {\n        const { id, senderIdStatusId } = senderIdObj.toJSON();\n        if (numbers) list.push(...numbers.split(','));\n        if (senderIdStatusId === 3) {\n          return Promise.reject({ message: 'SenderId is blocked', code: 404 });\n        }\n        const send = senderIdStatusId === 2;\n        return SmsManager.canSendSms({ userId, resellerId, routeId, count: list.length })\n          .then(() => db.MessageFly.create({ text, numbers, groupIds, total: list.length,\n            unicode, flash, scheduledOn, campaignId, routeId, senderId: id, send }))\n          .then(messageFly => SmsManager.createBulkMessages({ list, messageFlyId: messageFly.id,\n            userId: user.id, senderId: id, routeId, campaignId, unicode, flash, scheduledOn,\n            send }));\n      });\n  },\n};\n\nexport default SmsManager;\n"]}